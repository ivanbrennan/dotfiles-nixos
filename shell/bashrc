#!/bin/bash

export DOTFILES="$HOME/Development/resources/dotfiles-nixos"

# ::::::::: Paths ::::::::::::::::::::::::::::
{
  # DON'T EXPORT CDPATH, as it can screw up scripts.
  CDPATH=".:~/Development:~/Development/resources:~"
}

# ::::::::: Bash Completion ::::::::::::::::::
{
  # Display all 2856 possibilities? Um, no thanks
  shopt -s no_empty_cmd_completion

  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion

    # this should not be necessary, why isn't the completion autoloader working?
    . /usr/share/bash-completion/completions/git
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi

}

# ::::::::: One True Editor(s) :::::::::::::::
{
  export VISUAL=vim
  export GIT_EDITOR=vim
  export SVN_EDITOR=vim

  # Emacs
  export EMAIL="ivan.brennan@gmail.com"

  # Don't bother editing Git merge commit-messages
  export GIT_MERGE_AUTOEDIT="no"
}

# ::::::::: Colors :::::::::::::::::::::::::::
{
  [ -f ~/.bash_colors.sh ] && . ~/.bash_colors.sh

  export THEME=light
}

# ::::::::: Prompt :::::::::::::::::::::::::::
{
  build_prompt() {
    export PS1="╭${BRIGHT_BLUE}\u${NORMAL}·${BRIGHT_BLUE}\W${NORMAL}\$(grb_git_prompt)${NORMAL}\n╰ဝ "
    export PS2=" ❯ "
    export PS4=" + "
  }

  grb_git_prompt() {
    if [ -n "$(__gitdir)" ]; then
      local color="$(git_branch_color)"

      # __git_ps1 inserts the current git branch where %s is
      echo " $(__git_ps1 "(${color}%s${NORMAL})")"
    fi
  }

  git_branch_color() {
    local minutes="$(minutes_since_last_commit)"

    if [ -n "$minutes" ]; then
      echo "$(minutes_color minutes)"
    elif [[ "$THEME" == 'dark' ]]; then
      echo $WHITE
    else
      echo $BLACK
    fi
  }

  minutes_since_last_commit() {
    local now=$(date +%s)
    local last_commit=$(git log --pretty=format:'%at' -1 2>/dev/null)

    if [ "$?" -eq 0 ]; then
      echo $(( (now - last_commit) / 60 ))
    fi
  }

  minutes_color() {
    if [ -z "$1" ]; then
      return
    elif [[ "$1" -gt 30 ]]; then
      echo "${RED}"
    elif [[  "$1" -gt 10  ]]; then
      echo "${YELLOW}"
    else
      echo "${GREEN}"
    fi
  }

  build_prompt
}

# ::::::::: Sources ::::::::::::::::::::::::::
{
  files=(~/.bashrc.local
         ~/.bash_aliases
         ~/.bash_functions)

  for file in "${files[@]}"; do
    [ -r "$file" ] && . "$file"
  done
}

# ::::::::: Shell Options ::::::::::::::::::::
{
  shopt -s histappend cmdhist lithist

  # If shell is interactive, disable START/STOP output control.
  # This allows Ctrl-S to trigger i-search.
  if [[ $- = *i* ]]; then
    # -ixon : Disable START/STOP output control.
    # This allows Ctrl-S to trigger i-search.
    stty -ixon
  fi

  unset -v MAILCHECK
}

# ::::::::: History ::::::::::::::::::::::::::
{
  export HISTTIMEFORMAT='%F %T '
  export HISTCONTROL=erasedups:ignorespace
  export HISTSIZE=10000
  export HISTFILESIZE=20000
  export HISTIGNORE='jobs:[fb]g:history:gst:tls'
}

# Kubectl shell completion
[ -r ~/.kube/completion.bash.inc ] && . ~/.kube/completion.bash.inc


# minikube shell completion
[ -r ~/.minikube/completion.bash.inc ] && . ~/.minikube/completion.bash.inc
